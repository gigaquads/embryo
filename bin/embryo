#!/usr/bin/env python3
# encoding=utf8
# vim: set filetype=python

import argparse
import sys

from embryo.create import EmbryoGenerator

_NAME = "Embryo"
_VERSION = "1.0"
_TAGLINE = "monads beware"
_FORMAT = "{name} {version}, {tagline}"


def tag():
    return _FORMAT.format(**dict(
        name=_NAME, version=_VERSION, tagline=_TAGLINE))


def build_parser():
    """
    Build parser for interactivity
    """

    parser = argparse.ArgumentParser()
    parser.add_argument(
        'action',
        type=str,
        choices=['create', 'list'],
        help='''
        The embryo action to perform
        ''')

    parser.add_argument(
        'embryo',
        type=str,
        help='''
        The name of the embryo for embryonic generation.
        ''')
    parser.add_argument(
        '-d',
        '--dest',
        type=str,
        default='./',
        help='''
        Destination path to the directory where the embryo should be generated.
        ''')
    parser.add_argument(
        '-n',
        '--name',
        type=str,
        default='',
        help='''
        The name of the project you're creating.
        ''')
    parser.add_argument(
        '-v',
        '--version',
        action='version',
        help='The version of embryo',
        version=tag())
    return parser


def built_ins():
    embryo_names = []
    listof = '''
    Built-in embryo's include: {}.
    '''.format(', '.join(embryo_names))
    return listof


def parse_args(parser):
    args, unknown = parser.parse_known_args()

    # now combine known and unknown arguments into a single dict
    args_dict = {
        k: getattr(args, k)
        for k in dir(args) if not k.startswith('_')
    }

    for i in range(0, len(unknown), 2):
        k = unknown[i]
        v = unknown[i + 1]
        args_dict[k.lstrip('-')] = v

    # build a custom type with the combined argument names as attributes
    arguments = type('Arguments', (object, ), args_dict)()

    return arguments


def main():
    """
    Main
    """
    parser = build_parser()
    args = parse_args(parser)
    args.destination = args.dest

    # as `elif`, add additional routing here
    # order is important
    if args.action == 'create':
        gen = EmbryoGenerator().create(args)
    elif args.action == 'list':
        print('Not supported')
    else:
        parser.print_usage()
        print(built_ins())


if __name__ == "__main__":
    main()
