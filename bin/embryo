#!/usr/bin/env python3
# encoding=utf8
# vim: set filetype=python

from appyratus.util.argz import Prog, Subparser, Arg
from appyratus.types import Yaml

from embryo import Incubator


PROG = dict(
    prog="embryo",
    name="Embryo",
    version="0",
    tagline="wat",
)


class EmbryoCreateSubparser(Subparser):
    name = 'create'
    help = 'generate new embryo'
    defaults = dict(action='create')

    embryo_arg = Arg(
        flags=('embryo', ),
        type=str,
        help="Name of the embryo to hatch."
    )
    dest_arg = Arg(
        flags=('-d', '--destination'),
        type=str,
        default='.',
        help=
        "Destination directory."
    )
    context_arg = Arg(
        flags=('-c', '--context'),
        help="Path to a json/yaml context file or an inline JSON object.",
    )


class EmbryoProg(Prog):
    create_subparser = EmbryoCreateSubparser()

    def load_context_arg(self):
        """
        This loads the --context arg into a dict and returns it.
        """
        def has_ext(filename, extensions):
            return any(
                filename.lower().endswith('.' + ext.lower())
                for ext in extensions
            )

        context = {}

        if self.args.context:
            context_str = self.args.context
            if has_ext(context_str, ['json']):
                with open(context_filepath) as context_file:
                    context = ujson.load(context_file)
            elif has_ext(context_str, ['yml', 'yaml']):
                context = Yaml.from_file(context_filepath)
            else:
                # assume it's a JSON object string
                context = ujson.loads(context_str)

        return context

    def load_context(self):
        """
        Here, we convert the commandline arguments into a dict and merge it
        together with the dict loaded from the --context argument. The return
        value of this function is the context object passed into the loader.
        """
        non_context_arg_names = {
            'action', 'context', 'destination', 'embryo'
        }

        data_from_cli_kwargs = {
            k: getattr(self.args, k)
            for k in dir(self.args)
            if not ((k in non_context_arg_names) or k.startswith('_'))
        }

        data_from_context_arg = self.load_context_arg()

        context = {}
        context.update(data_from_cli_kwargs)
        context.update(data_from_context_arg)

        return context

    def create(self):
        incubator = Incubator(
            embryo_name=self.args.embryo,
            destination=self.args.destination,
            context=self.load_context(),
        )
        return incubator.hatch()


def main():
    """
    Main
    """
    prog = EmbryoProg(data=PROG)
    prog.run()


if __name__ == "__main__":
    try:
        main()
    except Exception as error:
        print("ERROR {}".format(error))
        raise error
